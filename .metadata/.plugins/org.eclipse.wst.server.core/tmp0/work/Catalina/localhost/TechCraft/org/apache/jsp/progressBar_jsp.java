/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.8
 * Generated at: 2024-05-01 15:47:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class progressBar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<title>Insert title here</title> \r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("    .progress b {\r\n");
      out.write("        letter-spacing: 1px;\r\n");
      out.write("        font-size: 13px; \r\n");
      out.write("    }\r\n");
      out.write("    .progress-container { \r\n");
      out.write("        width: 300px;\r\n");
      out.write("        height: 300px;\r\n");
      out.write("        border-top: solid 4px #002233;\r\n");
      out.write("        border-radius: 50%; \r\n");
      out.write("        margin: 10px; \r\n");
      out.write("    }\r\n");
      out.write("    .progress-barr {\r\n");
      out.write("        width: 0%;\r\n");
      out.write("        height: 100%;\r\n");
      out.write("        border-top: solid 4px #0bbfff;\r\n");
      out.write("        border-radius: 50%;\r\n");
      out.write("        transition: width 1s ease;\r\n");
      out.write("    }\r\n");
      out.write("    .progress-text {  \r\n");
      out.write("        color: #000;\r\n");
      out.write("        font-weight: bold;\r\n");
      out.write("        font-size: 30px;\r\n");
      out.write("        margin: 10px;\r\n");
      out.write("        margin-bottom: 0px;\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div style=\"display: flex;\">\r\n");
      out.write("    <div class=\"progress\">\r\n");
      out.write("        <b id=\"completed\">Complete all to get your Certificate !</b>\r\n");
      out.write("        <a id=\"get-certificate\" href=\"#\" style=\"display: none; color: #0bbfff; text-decoration: none;\"><b>Certificate !</b></a>\r\n");
      out.write("        <div class=\"progress-container\">\r\n");
      out.write("            <div class=\"progress-barr\" id=\"progressBar\"></div>\r\n");
      out.write("        </div> \r\n");
      out.write("    </div>\r\n");
      out.write("    <div class=\"progress-text\" id=\"progressText\"></div> \r\n");
      out.write("</div>\r\n");
      out.write("\r\n");

    int totalSubmittedChallenges = 20;
    int totalChallenges = 50;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("    const progressBar = document.getElementById('progressBar');\r\n");
      out.write("    const progressText = document.getElementById('progressText');\r\n");
      out.write("\r\n");
      out.write("    let width = 0;\r\n");
      out.write("    const interval = setInterval(() => {\r\n");
      out.write("        if (width == 100) {\r\n");
      out.write("            const completed = document.getElementById('completed');\r\n");
      out.write("            const getCertificate = document.getElementById('get-certificate');\r\n");
      out.write("\r\n");
      out.write("            completed.innerText = \"Completed, collect your \";\r\n");
      out.write("            getCertificate.style.display = 'inline-block';\r\n");
      out.write("            clearInterval(interval);\r\n");
      out.write("        } \r\n");
      out.write("        else {\r\n");
      out.write("            if (");
      out.print( totalChallenges );
      out.write(" == 0) {\r\n");
      out.write("                progressBar.style.width = 0 + '%'; \r\n");
      out.write("                progressText.innerText = 0 + '%';\r\n");
      out.write("            }\r\n");
      out.write("            else {\r\n");
      out.write("                width = (");
      out.print( totalSubmittedChallenges );
      out.write(' ');
      out.write('/');
      out.write(' ');
      out.print( totalChallenges );
      out.write(") * 100;\r\n");
      out.write("                progressBar.style.width = width + '%'; \r\n");
      out.write("                progressText.innerText = width.toFixed(0) + '%';\r\n");
      out.write("            } \r\n");
      out.write("        }\r\n");
      out.write("    }, 50);\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
